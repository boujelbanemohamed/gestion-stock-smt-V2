#!/bin/bash

# Script de diagnostic de la base de donn√©es RedHat
# √Ä ex√©cuter sur le serveur AVANT le d√©ploiement

echo "=========================================="
echo "üîç Diagnostic Base de Donn√©es RedHat"
echo "=========================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_success() { echo -e "${GREEN}‚úì $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö† $1${NC}"; }
log_error() { echo -e "${RED}‚úó $1${NC}"; }
log_info() { echo -e "‚Ñπ $1"; }

# 1. V√©rifier PostgreSQL
echo "1Ô∏è‚É£ V√©rification de PostgreSQL..."
if command -v psql &> /dev/null; then
    log_success "PostgreSQL install√©"
    psql --version
else
    log_error "PostgreSQL n'est pas install√©"
    exit 1
fi

echo ""

# 2. V√©rifier la connexion
echo "2Ô∏è‚É£ Test de connexion √† PostgreSQL..."
if sudo -u postgres psql -c "SELECT 1;" > /dev/null 2>&1; then
    log_success "Connexion PostgreSQL r√©ussie (via sudo)"
elif psql -U postgres -c "SELECT 1;" > /dev/null 2>&1; then
    log_success "Connexion PostgreSQL r√©ussie (directe)"
else
    log_error "Impossible de se connecter √† PostgreSQL"
    log_info "Essayez : sudo -u postgres psql"
    exit 1
fi

# D√©terminer la m√©thode de connexion √† utiliser
if sudo -u postgres psql -c "SELECT 1;" > /dev/null 2>&1; then
    PSQL_CMD="sudo -u postgres psql"
    PGDUMP_CMD="sudo -u postgres pg_dump"
else
    PSQL_CMD="psql -U postgres"
    PGDUMP_CMD="pg_dump -U postgres"
fi
log_info "M√©thode de connexion : $PSQL_CMD"

echo ""

# 3. V√©rifier si la base de donn√©es existe
echo "3Ô∏è‚É£ V√©rification de la base de donn√©es 'stock_management'..."
if $PSQL_CMD -lqt | cut -d \| -f 1 | grep -qw stock_management; then
    log_success "Base de donn√©es 'stock_management' existe"
else
    log_warning "Base de donn√©es 'stock_management' n'existe pas"
    log_info "Cr√©ation de la base de donn√©es..."
    $PSQL_CMD -c "CREATE DATABASE stock_management;"
    log_success "Base de donn√©es cr√©√©e"
fi

echo ""

# 4. Lister les tables
echo "4Ô∏è‚É£ Liste des tables dans la base de donn√©es..."
TABLES=$($PSQL_CMD stock_management -c "\dt" 2>&1)

if echo "$TABLES" | grep -q "No relations found"; then
    log_warning "Aucune table trouv√©e - Base de donn√©es VIDE"
    log_info "La base sera initialis√©e lors du d√©ploiement"
else
    log_success "Tables trouv√©es :"
    $PSQL_CMD stock_management -c "\dt"
fi

echo ""

# 5. Compter les donn√©es (si tables existent)
echo "5Ô∏è‚É£ Comptage des donn√©es..."

# Fonction pour compter une table
count_table() {
    local table_name=$1
    local display_name=$2
    
    # Essayer avec guillemets doubles (Prisma style)
    COUNT=$($PSQL_CMD stock_management -t -c "SELECT COUNT(*) FROM \"$table_name\";" 2>/dev/null | xargs)
    
    if [ $? -eq 0 ] && [ ! -z "$COUNT" ]; then
        log_success "$display_name: $COUNT entr√©es"
        return 0
    fi
    
    # Essayer sans guillemets (minuscules)
    COUNT=$($PSQL_CMD stock_management -t -c "SELECT COUNT(*) FROM ${table_name,,};" 2>/dev/null | xargs)
    
    if [ $? -eq 0 ] && [ ! -z "$COUNT" ]; then
        log_success "$display_name: $COUNT entr√©es (table en minuscules)"
        return 0
    fi
    
    log_warning "$display_name: Table non trouv√©e"
    return 1
}

count_table "User" "Utilisateurs"
count_table "Bank" "Banques"
count_table "Card" "Cartes"
count_table "Location" "Emplacements"
count_table "Movement" "Mouvements"
count_table "StockLevel" "Niveaux de stock"
count_table "AuditLog" "Logs d'audit"
count_table "Notification" "Notifications"
count_table "RolePermission" "Permissions"
count_table "AppConfig" "Configuration"

echo ""

# 6. V√©rifier le fichier .env
echo "6Ô∏è‚É£ V√©rification du fichier .env..."
if [ -f ".env" ]; then
    log_success "Fichier .env trouv√©"
    
    if grep -q "DATABASE_URL" .env; then
        log_success "DATABASE_URL configur√©"
        grep "^DATABASE_URL=" .env | sed 's/\(.*:\/\/.*:\).*\(@.*\)/\1****\2/'
    else
        log_warning "DATABASE_URL manquant dans .env"
    fi
    
    if grep -q "NODE_ENV" .env; then
        NODE_ENV_VAL=$(grep "^NODE_ENV=" .env | cut -d'=' -f2 | tr -d '"')
        log_info "NODE_ENV=$NODE_ENV_VAL"
    else
        log_warning "NODE_ENV non d√©fini"
    fi
else
    log_warning "Fichier .env non trouv√©"
    
    if [ -f ".env.production" ]; then
        log_info "Fichier .env.production trouv√©"
        log_info "Copiez-le : cp .env.production .env"
    else
        log_error "Aucun fichier .env ou .env.production"
    fi
fi

echo ""

# 7. R√©sum√©
echo "=========================================="
echo "üìä R√©sum√© du Diagnostic"
echo "=========================================="
echo ""

if echo "$TABLES" | grep -q "No relations found"; then
    echo "√âtat : Base de donn√©es VIDE"
    echo ""
    echo "Actions √† faire :"
    echo "  1. V√©rifier que .env existe et contient DATABASE_URL"
    echo "  2. Ex√©cuter : npx prisma generate"
    echo "  3. Ex√©cuter : npx prisma db push"
    echo "  4. Ou lancer : ./deploy.sh (fait tout automatiquement)"
else
    echo "√âtat : Base de donn√©es avec tables existantes"
    echo ""
    echo "Pr√™t pour le d√©ploiement :"
    echo "  ./deploy.sh"
fi

echo ""

