#!/bin/bash

set -e

APP_DIR="/var/www/stock-management"

info() { echo -e "\033[1;34m[INFO]\033[0m $*"; }
success() { echo -e "\033[1;32m[SUCCESS]\033[0m $*"; }
warn() { echo -e "\033[1;33m[WARN]\033[0m $*"; }
error() { echo -e "\033[1;31m[ERROR]\033[0m $*"; }

info "üîß Correction du chargement des variables d'environnement dans PM2"
info "=================================================================="

cd "$APP_DIR" || { error "R√©pertoire $APP_DIR non trouv√©"; exit 1; }

# 1. V√©rification du fichier .env
info "1. V√©rification du fichier .env..."
if [ ! -f ".env" ]; then
  error ".env non trouv√©!"
  exit 1
fi

# 2. Lecture et validation de DATABASE_URL
info "2. V√©rification de DATABASE_URL..."
source .env 2>/dev/null || true

if [ -z "${DATABASE_URL:-}" ]; then
  error "DATABASE_URL manquant dans .env!"
  exit 1
fi

info "DATABASE_URL trouv√©: $(echo $DATABASE_URL | sed 's/:[^:]*@/:****@/')"

# 3. Arr√™t de PM2
info "3. Arr√™t des processus PM2..."
pm2 stop all 2>/dev/null || true
pm2 delete all 2>/dev/null || true

# 4. Cr√©ation d'un fichier ecosystem.config.js pour PM2
info "4. Cr√©ation de la configuration PM2 avec variables d'environnement..."

# Lire .env et cr√©er le contenu env pour ecosystem.config.js
ENV_CONTENT=""
while IFS= read -r line || [ -n "$line" ]; do
  # Ignorer les lignes vides et les commentaires
  [[ "$line" =~ ^[[:space:]]*$ ]] && continue
  [[ "$line" =~ ^[[:space:]]*# ]] && continue
  
  # Extraire la cl√© et la valeur
  if [[ "$line" =~ ^([^=]+)=(.*)$ ]]; then
    KEY="${BASH_REMATCH[1]}"
    VALUE="${BASH_REMATCH[2]}"
    # Nettoyer les espaces au d√©but et √† la fin
    KEY=$(echo "$KEY" | xargs)
    VALUE=$(echo "$VALUE" | xargs)
    # Retirer les guillemets au d√©but et √† la fin si pr√©sents
    VALUE=$(echo "$VALUE" | sed -e 's/^["'\'']//' -e 's/["'\'']$//')
    # √âchapper les apostrophes dans la valeur
    VALUE=$(echo "$VALUE" | sed "s/'/\\\'/g")
    ENV_CONTENT="${ENV_CONTENT}      ${KEY}: '${VALUE}',"$'\n'
  fi
done < .env

# Cr√©er le fichier ecosystem.config.js
cat > ecosystem.config.js <<EOF
module.exports = {
  apps: [{
    name: 'stock-app',
    script: 'npm',
    args: 'start',
    cwd: '$APP_DIR',
    instances: 1,
    exec_mode: 'fork',
    env: {
${ENV_CONTENT%?}
    },
    error_file: '/root/.pm2/logs/stock-app-error.log',
    out_file: '/root/.pm2/logs/stock-app-out.log',
    log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
    merge_logs: true,
    autorestart: true,
    watch: false,
    max_memory_restart: '1G'
  }]
};
EOF

success "Configuration PM2 cr√©√©e (ecosystem.config.js)"

# 5. Alternative : Cr√©er un script de d√©marrage avec variables charg√©es
info "5. Cr√©ation d'un script de d√©marrage alternatif..."
cat > start-app.sh <<'EOFSCRIPT'
#!/bin/bash
cd /var/www/stock-management
export $(cat .env | grep -v '^#' | grep -v '^$' | xargs)
exec npm start
EOFSCRIPT
chmod +x start-app.sh

# 6. M√©thode 1 : Utiliser ecosystem.config.js
info "6. D√©marrage avec ecosystem.config.js..."
if pm2 start ecosystem.config.js; then
  success "‚úÖ Application d√©marr√©e avec ecosystem.config.js"
else
  warn "√âchec avec ecosystem.config.js, utilisation de l'alternative..."
  
  # M√©thode 2 : Charger les variables dans le shell et d√©marrer
  info "D√©marrage avec variables charg√©es depuis .env..."
  export $(cat .env | grep -v '^#' | grep -v '^$' | xargs)
  pm2 start start-app.sh --name stock-app || {
    error "√âchec du d√©marrage PM2"
    exit 1
  }
fi

# 7. Attente et v√©rification
info "7. Attente du d√©marrage (20s)..."
sleep 20

# 8. V√©rification des variables dans PM2
info "8. V√©rification des variables d'environnement dans PM2..."
pm2 describe stock-app | grep -A 50 "env:" | head -20 || true

# 9. Test de l'API
info "9. Test de l'API /api/auth/login..."
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test","password":"test"}' 2>/dev/null || echo "000")

if [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "400" ]; then
  success "‚úÖ API /api/auth/login r√©pond correctement (code: $HTTP_CODE)"
  success "‚úÖ Les variables d'environnement sont correctement charg√©es!"
elif [ "$HTTP_CODE" = "500" ]; then
  error "‚ùå Erreur 500 persistante"
  warn "Affichage des logs r√©cents..."
  pm2 logs --lines 50 --nostream || true
  
  warn "V√©rification manuelle des variables dans PM2:"
  info "  pm2 describe stock-app | grep DATABASE_URL"
  info "  pm2 env 0"
  exit 1
else
  info "R√©ponse HTTP: $HTTP_CODE"
fi

# 10. Affichage du statut
info "10. Statut PM2:"
pm2 status || true

info ""
success "‚úÖ Correction termin√©e!"
info ""
info "Pour v√©rifier les variables d'environnement:"
info "  pm2 describe stock-app"
info "  pm2 env 0"
info ""
info "Pour voir les logs:"
info "  pm2 logs stock-app"

