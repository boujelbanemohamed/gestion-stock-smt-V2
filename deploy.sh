#!/bin/bash

# Script de d√©ploiement automatis√© pour Red Hat
# Repository: https://github.com/boujelbanemohamed/gestion-stock-smt-V2
# Branche: main
# Commit: 779a575

set -e  # Arr√™ter en cas d'erreur

echo "=========================================="
echo "üöÄ D√©ploiement Gestion Stock SMT V2"
echo "=========================================="
echo ""

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

log_error() {
    echo -e "${RED}‚úó $1${NC}"
}

log_info() {
    echo -e "‚Ñπ $1"
}

# 1. V√©rifier la branche actuelle
echo "1Ô∏è‚É£ V√©rification de la branche..."
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "main" ]; then
    log_warning "Vous n'√™tes pas sur la branche main (branche actuelle: $CURRENT_BRANCH)"
    read -p "Voulez-vous continuer ? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_error "D√©ploiement annul√©"
        exit 1
    fi
fi
log_success "Branche: $CURRENT_BRANCH"

# 2. Backup de la base de donn√©es
echo ""
echo "2Ô∏è‚É£ Sauvegarde de la base de donn√©es..."
BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
if command -v pg_dump &> /dev/null; then
    pg_dump -U postgres stock_management > "$BACKUP_FILE" 2>/dev/null || {
        log_warning "Impossible de cr√©er le backup automatiquement"
        log_info "Veuillez cr√©er un backup manuellement avec:"
        log_info "pg_dump -U postgres stock_management > $BACKUP_FILE"
        read -p "Appuyez sur Entr√©e une fois le backup cr√©√©..."
    }
    if [ -f "$BACKUP_FILE" ]; then
        log_success "Backup cr√©√©: $BACKUP_FILE ($(du -h $BACKUP_FILE | cut -f1))"
    fi
else
    log_warning "pg_dump non trouv√©. Backup ignor√©."
fi

# 3. R√©cup√©ration des modifications
echo ""
echo "3Ô∏è‚É£ R√©cup√©ration des modifications depuis GitHub..."
git fetch origin
log_success "Fetch effectu√©"

# 4. Pull des modifications
echo ""
echo "4Ô∏è‚É£ Pull depuis origin/main..."
git pull origin main
CURRENT_COMMIT=$(git log --oneline -1)
log_success "Commit actuel: $CURRENT_COMMIT"

# 5. Installation des d√©pendances
echo ""
echo "5Ô∏è‚É£ Installation des d√©pendances..."
npm install
log_success "D√©pendances install√©es"

# 6. Configuration Prisma
echo ""
echo "6Ô∏è‚É£ Configuration Prisma..."
npx prisma generate
log_success "Client Prisma g√©n√©r√©"

echo ""
echo "   Application des migrations..."
npx prisma migrate deploy
log_success "Migrations appliqu√©es"

# 7. V√©rification du fichier .env
echo ""
echo "7Ô∏è‚É£ V√©rification du fichier .env..."
if [ -f ".env" ]; then
    log_success "Fichier .env trouv√©"
    if grep -q "DATABASE_URL" .env; then
        log_success "DATABASE_URL configur√©"
    else
        log_error "DATABASE_URL manquant dans .env"
        exit 1
    fi
else
    log_error "Fichier .env non trouv√©"
    exit 1
fi

# 8. Build de l'application
echo ""
echo "8Ô∏è‚É£ Build de l'application..."
npm run build
log_success "Build termin√© avec succ√®s"

# 9. Red√©marrage du service
echo ""
echo "9Ô∏è‚É£ Red√©marrage du service..."

# D√©tecter PM2 ou systemd
if command -v pm2 &> /dev/null; then
    log_info "Utilisation de PM2..."
    pm2 restart gestion-stock-smt || pm2 start npm --name "gestion-stock-smt" -- start
    pm2 save
    log_success "Application red√©marr√©e avec PM2"
    echo ""
    pm2 status
elif systemctl list-units --type=service | grep -q "gestion-stock-smt"; then
    log_info "Utilisation de systemd..."
    sudo systemctl restart gestion-stock-smt
    log_success "Service red√©marr√© avec systemd"
    echo ""
    sudo systemctl status gestion-stock-smt --no-pager
else
    log_warning "Aucun gestionnaire de processus d√©tect√© (PM2 ou systemd)"
    log_info "Veuillez red√©marrer l'application manuellement"
fi

# 10. V√©rifications post-d√©ploiement
echo ""
echo "üîü V√©rifications post-d√©ploiement..."

# Attendre que l'application d√©marre
sleep 5

# Test de l'API
if command -v curl &> /dev/null; then
    if curl -s -f http://localhost:3000 > /dev/null 2>&1; then
        log_success "Application accessible sur http://localhost:3000"
    else
        log_warning "Application non accessible sur http://localhost:3000"
        log_info "V√©rifiez les logs pour plus d'informations"
    fi
fi

# R√©sum√©
echo ""
echo "=========================================="
echo "‚úÖ D√©ploiement termin√© avec succ√®s !"
echo "=========================================="
echo ""
echo "üìä R√©sum√©:"
echo "  - Repository: https://github.com/boujelbanemohamed/gestion-stock-smt-V2"
echo "  - Branche: main"
echo "  - Commit: $CURRENT_COMMIT"
echo "  - Backup: $BACKUP_FILE"
echo ""
echo "üìù Prochaines √©tapes:"
echo "  1. V√©rifier les logs: pm2 logs gestion-stock-smt"
echo "  2. Tester l'application dans le navigateur"
echo "  3. V√©rifier les logs d'audit dans la base de donn√©es"
echo ""
echo "üîó Liens utiles:"
echo "  - Application: http://localhost:3000"
echo "  - Logs: pm2 logs gestion-stock-smt (ou journalctl -u gestion-stock-smt)"
echo "  - Documentation: DEPLOYMENT-GUIDE.md"
echo ""
