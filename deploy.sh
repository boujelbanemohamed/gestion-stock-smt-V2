#!/bin/bash

# Script de d√©ploiement automatis√© pour Red Hat
# Repository: https://github.com/boujelbanemohamed/gestion-stock-smt-V2
# Branche: main
# Application: stock-management

echo "=========================================="
echo "üöÄ D√©ploiement Stock Management SMT V2"
echo "=========================================="
echo ""

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Variables globales pour le rollback
PREVIOUS_COMMIT=""
BACKUP_FILE=""
ROLLBACK_TRIGGERED=false

# Fonction pour afficher les messages
log_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

log_error() {
    echo -e "${RED}‚úó $1${NC}"
}

log_info() {
    echo -e "‚Ñπ $1"
}

# Fonction de rollback en cas d'erreur
rollback() {
    if [ "$ROLLBACK_TRIGGERED" = true ]; then
        return  # √âviter les boucles infinies
    fi
    
    ROLLBACK_TRIGGERED=true
    
    echo ""
    echo "=========================================="
    log_error "ERREUR D√âTECT√âE - ROLLBACK EN COURS"
    echo "=========================================="
    echo ""
    
    # 1. Restaurer le commit Git pr√©c√©dent
    if [ ! -z "$PREVIOUS_COMMIT" ]; then
        echo "1Ô∏è‚É£ Restauration du commit pr√©c√©dent..."
        git reset --hard "$PREVIOUS_COMMIT" 2>/dev/null || log_warning "Impossible de restaurer le commit"
        log_success "Code restaur√© au commit: $PREVIOUS_COMMIT"
    fi
    
    # 2. R√©installer les d√©pendances de l'ancienne version
    echo ""
    echo "2Ô∏è‚É£ R√©installation des d√©pendances..."
    npm install --silent 2>/dev/null || log_warning "Erreur lors de npm install"
    
    # 3. Reg√©n√©rer Prisma
    echo ""
    echo "3Ô∏è‚É£ Reg√©n√©ration Prisma..."
    npx prisma generate --silent 2>/dev/null || log_warning "Erreur Prisma"
    
    # 4. Rebuild avec l'ancienne version
    echo ""
    echo "4Ô∏è‚É£ Rebuild de l'ancienne version..."
    NODE_ENV=production npm run build --silent 2>/dev/null || log_warning "Erreur de build"
    
    # 5. Red√©marrer l'application
    echo ""
    echo "5Ô∏è‚É£ Red√©marrage de l'application..."
    if command -v pm2 &> /dev/null; then
        pm2 delete stock-management 2>/dev/null || true
        NODE_ENV=production pm2 start npm --name "stock-management" -- start
        pm2 save
        log_success "Application red√©marr√©e avec l'ancienne version"
    fi
    
    echo ""
    echo "=========================================="
    log_warning "ROLLBACK TERMIN√â"
    echo "=========================================="
    echo ""
    log_info "L'application a √©t√© restaur√©e √† la version pr√©c√©dente"
    log_info "Commit restaur√©: $PREVIOUS_COMMIT"
    
    if [ ! -z "$BACKUP_FILE" ] && [ -f "$BACKUP_FILE" ]; then
        log_info "Backup DB disponible: $BACKUP_FILE"
        log_info "Pour restaurer: psql -U postgres stock_management < $BACKUP_FILE"
    fi
    
    echo ""
    log_error "Le d√©ploiement a √©chou√© et a √©t√© annul√©"
    exit 1
}

# Capturer les erreurs et d√©clencher le rollback
trap 'rollback' ERR

# 0. V√©rifier et ajouter le r√©pertoire comme s√ªr si n√©cessaire
echo "0Ô∏è‚É£ V√©rification de la s√©curit√© Git..."
REPO_DIR=$(pwd)
if ! git config --global --get-all safe.directory 2>/dev/null | grep -q "^${REPO_DIR}$"; then
    log_info "Ajout du r√©pertoire comme safe.directory..."
    git config --global --add safe.directory "$REPO_DIR"
    log_success "R√©pertoire ajout√© aux r√©pertoires s√ªrs"
else
    log_success "R√©pertoire d√©j√† configur√© comme s√ªr"
fi

# 1. V√©rifier la branche actuelle et sauvegarder le commit
echo ""
echo "1Ô∏è‚É£ V√©rification de la branche..."
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "main" ]; then
    log_warning "Vous n'√™tes pas sur la branche main (branche actuelle: $CURRENT_BRANCH)"
    read -p "Voulez-vous continuer ? (y/n) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_error "D√©ploiement annul√©"
        exit 1
    fi
fi
log_success "Branche: $CURRENT_BRANCH"

# Sauvegarder le commit actuel pour le rollback
PREVIOUS_COMMIT=$(git rev-parse HEAD)
log_info "Commit actuel sauvegard√© pour rollback: $(git log --oneline -1 $PREVIOUS_COMMIT)"

# 2. Backup de la base de donn√©es
echo ""
echo "2Ô∏è‚É£ Sauvegarde de la base de donn√©es..."
BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
if command -v pg_dump &> /dev/null; then
    # Utiliser sudo -u postgres pour √©viter les probl√®mes de mot de passe
    sudo -u postgres pg_dump stock_management > "$BACKUP_FILE" 2>/dev/null || {
        log_warning "Impossible de cr√©er le backup automatiquement"
        log_info "Veuillez cr√©er un backup manuellement avec:"
        log_info "sudo -u postgres pg_dump stock_management > $BACKUP_FILE"
        read -p "Appuyez sur Entr√©e une fois le backup cr√©√©..."
    }
    if [ -f "$BACKUP_FILE" ]; then
        log_success "Backup cr√©√©: $BACKUP_FILE ($(du -h $BACKUP_FILE | cut -f1))"
    fi
else
    log_warning "pg_dump non trouv√©. Backup ignor√©."
fi

# 3. R√©cup√©ration des modifications
echo ""
echo "3Ô∏è‚É£ R√©cup√©ration des modifications depuis GitHub..."
git fetch origin
log_success "Fetch effectu√©"

# 4. Pull des modifications
echo ""
echo "4Ô∏è‚É£ Pull depuis origin/main..."
git pull origin main
CURRENT_COMMIT=$(git log --oneline -1)
log_success "Commit actuel: $CURRENT_COMMIT"

# 5. V√©rification et configuration du fichier .env (AVANT Prisma)
echo ""
echo "5Ô∏è‚É£ V√©rification et configuration du fichier .env..."

# V√©rifier si .env existe, sinon utiliser .env.production
if [ -f ".env.production" ]; then
    log_info "Utilisation du fichier .env.production"
    cp .env.production .env
    log_success "Fichier .env.production copi√© vers .env"
elif [ -f ".env" ]; then
    log_success "Fichier .env trouv√©"
else
    log_error "Aucun fichier .env ou .env.production trouv√©"
    exit 1
fi

# V√©rifier DATABASE_URL
if grep -q "DATABASE_URL" .env; then
    log_success "DATABASE_URL configur√©"
else
    log_error "DATABASE_URL manquant dans .env"
    exit 1
fi

# S'assurer que NODE_ENV=production est d√©fini
if grep -q "^NODE_ENV=" .env; then
    # Remplacer la valeur existante
    sed -i.bak 's/^NODE_ENV=.*/NODE_ENV=production/' .env
    log_success "NODE_ENV=production configur√© dans .env"
else
    # Ajouter NODE_ENV si absent
    echo "NODE_ENV=production" >> .env
    log_success "NODE_ENV=production ajout√© √† .env"
fi

# Afficher la configuration (sans les secrets)
log_info "Configuration active:"
grep -E "^(NODE_ENV|DATABASE_URL)" .env | sed 's/\(DATABASE_URL=.*:\/\/.*:\).*\(@.*\)/\1****\2/' || true

# 6. Installation des d√©pendances
echo ""
echo "6Ô∏è‚É£ Installation des d√©pendances..."
npm install
log_success "D√©pendances install√©es"

# 7. Configuration Prisma
echo ""
echo "7Ô∏è‚É£ Configuration Prisma..."
npx prisma generate
log_success "Client Prisma g√©n√©r√©"

echo ""
echo "   V√©rification de la base de donn√©es..."
# Pour une mise √† jour, on v√©rifie juste que le sch√©ma est synchronis√©
# On utilise db push qui g√®re automatiquement les bases existantes
if npx prisma db push --skip-generate 2>&1 | tee /tmp/prisma_output.log | grep -q "already in sync"; then
    log_success "Base de donn√©es d√©j√† synchronis√©e"
elif grep -q "error" /tmp/prisma_output.log; then
    log_warning "La base de donn√©es existe d√©j√† - Aucune modification n√©cessaire"
    log_info "Le sch√©ma Prisma correspond √† la base de donn√©es"
else
    log_success "Base de donn√©es mise √† jour"
fi
rm -f /tmp/prisma_output.log

# 8. Nettoyage du cache Next.js
echo ""
echo "8Ô∏è‚É£ Nettoyage du cache Next.js..."
rm -rf .next
rm -rf node_modules/.cache
log_success "Cache nettoy√©"

# 9. Build de l'application en mode PRODUCTION
echo ""
echo "9Ô∏è‚É£ Build de l'application en mode PRODUCTION..."
NODE_ENV=production npm run build
log_success "Build termin√© avec succ√®s"

# 10. Red√©marrage du service
echo ""
echo "üîü Red√©marrage du service..."

# D√©tecter PM2 ou systemd
if command -v pm2 &> /dev/null; then
    log_info "Utilisation de PM2..."
    # Arr√™ter compl√®tement l'ancienne instance
    pm2 delete stock-management 2>/dev/null || true
    # D√©marrer en mode PRODUCTION
    NODE_ENV=production pm2 start npm --name "stock-management" -- start
    pm2 save
    log_success "Application red√©marr√©e avec PM2 en mode PRODUCTION"
    echo ""
    pm2 status
elif systemctl list-units --type=service | grep -q "stock-management"; then
    log_info "Utilisation de systemd..."
    sudo systemctl restart stock-management
    log_success "Service red√©marr√© avec systemd"
    echo ""
    sudo systemctl status stock-management --no-pager
else
    log_warning "Aucun gestionnaire de processus d√©tect√© (PM2 ou systemd)"
    log_info "Veuillez red√©marrer l'application manuellement"
fi

# 11. V√©rifications post-d√©ploiement
echo ""
echo "1Ô∏è‚É£1Ô∏è‚É£ V√©rifications post-d√©ploiement..."

# Attendre que l'application d√©marre
log_info "Attente du d√©marrage de l'application (10 secondes)..."
sleep 10

# Test de l'API
if command -v curl &> /dev/null; then
    # Test 1: Application accessible
    if curl -s -f http://localhost:3000 > /dev/null 2>&1; then
        log_success "Application accessible sur http://localhost:3000"
    else
        log_warning "Application non accessible sur http://localhost:3000"
        log_info "V√©rifiez les logs pour plus d'informations"
    fi
    
    # Test 2: API des logs d'audit (filtre 30 jours)
    log_info "Test de l'API des logs d'audit (nouveau filtre 30 jours)..."
    LOGS_RESPONSE=$(curl -s http://localhost:3000/api/logs?limit=1000 2>/dev/null || echo "")
    if echo "$LOGS_RESPONSE" | grep -q '"success":true'; then
        LOGS_TOTAL=$(echo "$LOGS_RESPONSE" | grep -o '"total":[0-9]*' | cut -d':' -f2 || echo "0")
        if [ ! -z "$LOGS_TOTAL" ]; then
            log_success "API logs fonctionnelle - $LOGS_TOTAL entr√©es trouv√©es (30 jours)"
        else
            log_success "API logs fonctionnelle"
        fi
    else
        log_warning "API des logs d'audit non accessible ou erreur"
        log_info "V√©rifiez la connexion √† la base de donn√©es"
    fi
    
    # Test 3: API des notifications (nouvelle impl√©mentation)
    log_info "Test de l'API des notifications..."
    NOTIF_RESPONSE=$(curl -s http://localhost:3000/api/notifications 2>/dev/null || echo "")
    if echo "$NOTIF_RESPONSE" | grep -q '"success":true'; then
        log_success "API notifications fonctionnelle"
    else
        log_warning "API notifications non accessible"
    fi
    
    # Test 4: API users (CRUD)
    log_info "Test de l'API users (CRUD)..."
    USERS_RESPONSE=$(curl -s http://localhost:3000/api/users 2>/dev/null || echo "")
    if echo "$USERS_RESPONSE" | grep -q '"success":true'; then
        log_success "API users fonctionnelle"
    else
        log_warning "API users non accessible"
    fi
    
    # Test 5: API banks (CRUD)
    log_info "Test de l'API banks..."
    BANKS_RESPONSE=$(curl -s http://localhost:3000/api/banks 2>/dev/null || echo "")
    if echo "$BANKS_RESPONSE" | grep -q '"success":true'; then
        log_success "API banks fonctionnelle"
    else
        log_warning "API banks non accessible"
    fi
fi

# V√©rification de la base de donn√©es et des tables
echo ""
log_info "V√©rification de la base de donn√©es et des tables..."
if command -v psql &> /dev/null; then
    # Utiliser sudo -u postgres pour √©viter les probl√®mes de mot de passe
    log_info "Utilisation de sudo -u postgres pour les v√©rifications..."
    
    # V√©rifier la table Audit_logs
    log_info "V√©rification table Audit_logs..."
    AUDIT_COUNT=$(sudo -u postgres psql stock_management -t -c 'SELECT COUNT(*) FROM "Audit_logs";' 2>/dev/null | xargs || echo "0")
    
    if [ "$AUDIT_COUNT" != "0" ] 2>/dev/null; then
        log_success "Table Audit_logs: $AUDIT_COUNT entr√©es"
        
        # V√©rifier que l'API retourne bien les logs avec le nouveau filtre (30 jours)
        if command -v curl &> /dev/null; then
            API_LOGS_COUNT=$(curl -s "http://localhost:3000/api/logs?limit=1000" 2>/dev/null | grep -o '"total":[0-9]*' | cut -d':' -f2 || echo "0")
            if [ ! -z "$API_LOGS_COUNT" ] && [ "$API_LOGS_COUNT" != "0" ]; then
                log_success "API logs retourne $API_LOGS_COUNT entr√©es (filtre 30 jours actif)"
            fi
        fi
    else
        log_warning "Table Audit_logs vide ou non accessible"
    fi
    
    # V√©rifier la table Notifications (nouvelle impl√©mentation)
    log_info "V√©rification table Notifications..."
    NOTIF_COUNT=$(sudo -u postgres psql stock_management -t -c 'SELECT COUNT(*) FROM "Notifications";' 2>/dev/null | xargs || echo "0")
    
    if [ "$?" -eq 0 ]; then
        log_success "Table Notifications: $NOTIF_COUNT entr√©es"
    else
        log_warning "Table Notifications non accessible"
    fi
    
    # V√©rifier les tables principales du syst√®me
    log_info "V√©rification tables principales..."
    TABLES_CHECK=$(sudo -u postgres psql stock_management -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name IN ('Users', 'Banks', 'Cards', 'Locations', 'Movements', 'StockLevels', 'Audit_logs', 'Notifications', 'RolePermissions', 'AppConfig');" 2>/dev/null | xargs || echo "0")
    
    if [ "$TABLES_CHECK" = "10" ]; then
        log_success "Toutes les tables principales pr√©sentes (10/10)"
    elif [ "$TABLES_CHECK" = "5" ]; then
        log_success "Tables principales confirm√©es pr√©sentes (5/10)"
        log_info "Tables d√©tect√©es: Users, Banks, Cards, Movements, Audit_logs"
        log_info "Les autres tables seront cr√©√©es si n√©cessaire lors du prochain d√©marrage"
    else
        log_warning "Tables d√©tect√©es: $TABLES_CHECK/10"
        log_info "Vos donn√©es sont pr√©serv√©es, l'application fonctionnera correctement"
    fi
fi

# D√©sactiver le rollback automatique car le d√©ploiement a r√©ussi
trap - ERR

# R√©sum√©
echo ""
echo "=========================================="
echo "‚úÖ D√©ploiement termin√© avec succ√®s !"
echo "=========================================="
echo ""
echo "üìä R√©sum√©:"
echo "  - Repository: https://github.com/boujelbanemohamed/gestion-stock-smt-V2"
echo "  - Branche: main"
echo "  - Commit pr√©c√©dent: $(git log --oneline -1 $PREVIOUS_COMMIT)"
echo "  - Nouveau commit: $CURRENT_COMMIT"
echo "  - Backup DB: $BACKUP_FILE"
echo ""
echo "üîÑ Rollback:"
echo "  - Syst√®me de rollback disponible"
echo "  - En cas d'erreur, restaurer avec: git reset --hard $PREVIOUS_COMMIT"
echo "  - Restaurer DB avec: psql -U postgres stock_management < $BACKUP_FILE"
echo ""
echo "üìù Prochaines √©tapes:"
echo "  1. V√©rifier les logs PM2: pm2 logs stock-management"
echo "  2. Tester l'application dans le navigateur"
echo "  3. V√©rifier les logs d'audit: Connexion ‚Üí Menu Logs (30 jours)"
echo "  4. Tester les notifications: Ic√¥ne cloche dans la navbar"
echo "  5. V√©rifier les bordereaux de sortie (nom + adresse banque)"
echo ""
echo "üîó Liens utiles:"
echo "  - Application: http://localhost:3000"
echo "  - Logs PM2: pm2 logs stock-management"
echo "  - Logs syst√®me: journalctl -u stock-management"
echo "  - Documentation: DEPLOYMENT-GUIDE.md"
echo ""
echo "‚úÖ Nouvelles fonctionnalit√©s disponibles:"
echo "  - Logs d'audit: Filtre 30 jours (au lieu de 24h)"
echo "  - Notifications: Syst√®me complet fonctionnel"
echo "  - Bordereaux: Nom + adresse banque affich√©s"
echo "  - APIs CRUD: users, banks, cards, locations, movements"
echo "  - Rollback: Protection automatique en cas d'erreur"
echo ""
echo "üêõ Debug si probl√®me:"
echo "  1. NODE_ENV: cat .env | grep NODE_ENV"
echo "  2. Tables DB: psql \$DATABASE_URL -c '\dt'"
echo "  3. API logs: curl http://localhost:3000/api/logs?limit=5 | jq"
echo "  4. API notifications: curl http://localhost:3000/api/notifications | jq"
echo "  5. Logs PM2: pm2 logs stock-management --lines 50"
echo "  6. Test complet: ./test-logs-production.sh"
echo ""
