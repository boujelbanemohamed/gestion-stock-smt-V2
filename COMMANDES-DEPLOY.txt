================================================================================
DÉPLOIEMENT REDHAT - COMMANDES À COPIER-COLLER
================================================================================

⚠️ IMPORTANT: Votre base de données contient déjà des données réelles.
   Le script préserve TOUTES vos données existantes.

================================================================================

ÉTAPE 1 : CONNEXION AU SERVEUR
-------------------------------
ssh utilisateur@adresse-serveur-redhat

# Remplacez "utilisateur" et "adresse-serveur-redhat" par vos valeurs


================================================================================

ÉTAPE 2 : ALLER DANS LE RÉPERTOIRE
-----------------------------------
cd /chemin/vers/stock-management-V2

# Remplacez par le vrai chemin, exemple :
# cd /var/www/stock-management-V2


================================================================================

ÉTAPE 3 : BACKUP DE SÉCURITÉ (RECOMMANDÉ)
------------------------------------------
pg_dump -U postgres stock_management > backup_securite_$(date +%Y%m%d_%H%M%S).sql
ls -lh backup_securite_*.sql

# Vérifiez que le backup est créé (taille en Mo)


================================================================================

ÉTAPE 4 : DIAGNOSTIC BASE DE DONNÉES (IMPORTANT)
------------------------------------------------
# Lancer le script de diagnostic
./DIAGNOSTIC-DB-REDHAT.sh

# OU manuellement :

# Vérifier si la base existe et a des tables
psql -U postgres stock_management -c "\dt"

# Si vous voyez des tables, compter les données :
psql -U postgres stock_management -c "SELECT COUNT(*) FROM \"User\";" 2>/dev/null || echo "Table User non trouvée (normal si base vide)"
psql -U postgres stock_management -c "SELECT COUNT(*) FROM \"Bank\";" 2>/dev/null || echo "Table Bank non trouvée (normal si base vide)"
psql -U postgres stock_management -c "SELECT COUNT(*) FROM \"Card\";" 2>/dev/null || echo "Table Card non trouvée (normal si base vide)"

# Si base VIDE : Le script deploy.sh initialisera tout automatiquement
# Si base PLEINE : Notez les chiffres pour comparaison après


================================================================================

ÉTAPE 5 : LANCER LE DÉPLOIEMENT
--------------------------------
chmod +x deploy.sh
./deploy.sh

# Attendez 2-3 minutes
# Le script crée un backup automatique et déploie


================================================================================

ÉTAPE 6 : VÉRIFIER LE COMMIT
-----------------------------
git log --oneline -1

# Doit afficher : 144684e docs: Guides déploiement...


================================================================================

ÉTAPE 7 : VÉRIFIER PM2
----------------------
pm2 status

# Doit afficher "online"

pm2 logs stock-management --lines 20

# Pas d'erreurs en rouge


================================================================================

ÉTAPE 8 : VÉRIFIER LES DONNÉES APRÈS DÉPLOIEMENT
-------------------------------------------------
# Relancer le diagnostic
./DIAGNOSTIC-DB-REDHAT.sh

# OU compter manuellement :
psql -U postgres stock_management -c "SELECT COUNT(*) FROM \"User\";" 2>/dev/null
psql -U postgres stock_management -c "SELECT COUNT(*) FROM \"Bank\";" 2>/dev/null
psql -U postgres stock_management -c "SELECT COUNT(*) FROM \"Card\";" 2>/dev/null

# COMPAREZ avec ÉTAPE 4 : 
# - Si base était VIDE : Maintenant des tables existent
# - Si base était PLEINE : Chiffres doivent être identiques


================================================================================

ÉTAPE 9 : TEST API
------------------
curl http://localhost:3000/api/users | jq '.data | length'
curl http://localhost:3000/api/cards | jq '.data | length'
curl http://localhost:3000/api/logs?limit=5 | jq '.total'

# Les nombres doivent correspondre à vos données


================================================================================

ÉTAPE 10 : TEST NAVIGATEUR
---------------------------
Ouvrir : http://votre-domaine.com

1. Se connecter
2. Menu Banques → Vérifier que toutes vos banques sont là
3. Menu Cartes → Vérifier toutes vos cartes
4. Cliquer "Ajouter une carte" :
   ✓ Seuil max = 100000 ?
   ✓ Placeholder Sous-type = "ex. Nationale" ?
   ✓ Placeholder Sous-sous-type = "ex. Nom de la carte" ?
5. Menu Mouvements → Vérifier l'historique
6. Menu Logs → Vérifier les logs (30 jours)
7. Icône 🔔 → Vérifier les notifications


================================================================================

✅ DÉPLOIEMENT TERMINÉ AVEC SUCCÈS !
================================================================================

Vos données sont préservées et les nouvelles fonctionnalités sont actives :
  ✓ Logs d'audit : Filtre 30 jours
  ✓ Notifications : Système complet
  ✓ Modal carte : Seuils 50/100000
  ✓ Bordereaux : Nom + adresse banque


================================================================================

🆘 EN CAS DE PROBLÈME
================================================================================

Rollback automatique (déjà fait si erreur pendant deploy.sh)

Rollback manuel :
-----------------
git reset --hard <commit-precedent>
npm install
npx prisma generate
NODE_ENV=production npm run build
pm2 restart stock-management

Restaurer les données (si vraiment nécessaire) :
-------------------------------------------------
pm2 stop stock-management
psql -U postgres stock_management < backup_securite_20251020_xxx.sql
pm2 start stock-management


================================================================================

📚 DOCUMENTATION COMPLÈTE
================================================================================

cat ETAPES-DEPLOY-REDHAT.md          # Guide étape par étape détaillé
cat DEPLOY-WITH-EXISTING-DATA.md     # Protection données existantes
cat DEPLOY-NOW.md                    # Guide rapide
cat ROLLBACK-GUIDE.md                # Guide rollback


================================================================================

