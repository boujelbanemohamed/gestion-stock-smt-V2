#!/bin/bash

# Script de diagnostic complet pour RedHat
# R√©sout les probl√®mes de connexion DB et variables d'environnement

echo "=========================================="
echo "üîç Diagnostic Complet RedHat"
echo "=========================================="

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

log_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

log_error() {
    echo -e "${RED}‚úó $1${NC}"
}

log_info() {
    echo -e "‚Ñπ $1"
}

# 1. Diagnostic PostgreSQL
echo ""
echo "1Ô∏è‚É£ Diagnostic PostgreSQL..."

# V√©rifier si PostgreSQL est d√©marr√©
if systemctl is-active --quiet postgresql; then
    log_success "PostgreSQL est d√©marr√©"
else
    log_warning "PostgreSQL n'est pas d√©marr√©"
    log_info "D√©marrage de PostgreSQL..."
    systemctl start postgresql
    sleep 3
    if systemctl is-active --quiet postgresql; then
        log_success "PostgreSQL d√©marr√© avec succ√®s"
    else
        log_error "Impossible de d√©marrer PostgreSQL"
    fi
fi

# V√©rifier les processus PostgreSQL
echo ""
log_info "Processus PostgreSQL:"
ps aux | grep postgres | grep -v grep || log_warning "Aucun processus PostgreSQL trouv√©"

# V√©rifier les ports
echo ""
log_info "Ports PostgreSQL:"
netstat -tlnp | grep 5432 || log_warning "Port 5432 non ouvert"

# 2. Test de connexion avec stockapp
echo ""
echo "2Ô∏è‚É£ Test de connexion avec stockapp:SMT2025..."

# Test de connexion directe
if PGPASSWORD=SMT2025 psql -U stockapp -d stock_management -c "SELECT 1;" 2>/dev/null; then
    log_success "Connexion stockapp:SMT2025 r√©ussie"
else
    log_error "Connexion stockapp:SMT2025 √©chou√©e"
    
    # V√©rifier si l'utilisateur stockapp existe
    echo ""
    log_info "V√©rification de l'utilisateur stockapp..."
    if sudo -u postgres psql -c "\du" | grep -q stockapp; then
        log_success "Utilisateur stockapp existe"
    else
        log_warning "Utilisateur stockapp n'existe pas"
        log_info "Cr√©ation de l'utilisateur stockapp..."
        sudo -u postgres psql -c "CREATE USER stockapp WITH PASSWORD 'SMT2025';" 2>/dev/null || true
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE stock_management TO stockapp;" 2>/dev/null || true
    fi
    
    # V√©rifier si la base stock_management existe
    echo ""
    log_info "V√©rification de la base stock_management..."
    if sudo -u postgres psql -c "\l" | grep -q stock_management; then
        log_success "Base stock_management existe"
    else
        log_warning "Base stock_management n'existe pas"
        log_info "Cr√©ation de la base stock_management..."
        sudo -u postgres createdb stock_management 2>/dev/null || true
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE stock_management TO stockapp;" 2>/dev/null || true
    fi
fi

# 3. Diagnostic des variables d'environnement
echo ""
echo "3Ô∏è‚É£ Diagnostic des variables d'environnement..."

if [ -f ".env" ]; then
    log_success "Fichier .env trouv√©"
    
    # V√©rifier NODE_ENV
    if grep -q "NODE_ENV=production" .env; then
        log_success "NODE_ENV=production ‚úì"
    else
        log_warning "NODE_ENV manquant ou incorrect"
    fi
    
    # V√©rifier DATABASE_URL
    if grep -q "DATABASE_URL=" .env; then
        log_success "DATABASE_URL configur√© ‚úì"
        DATABASE_URL=$(grep "DATABASE_URL=" .env | cut -d'=' -f2 | tr -d '"')
        log_info "DATABASE_URL: $DATABASE_URL"
    else
        log_error "DATABASE_URL manquant"
    fi
    
    # V√©rifier SESSION_SECRET
    if grep -q "SESSION_SECRET=" .env; then
        log_success "SESSION_SECRET configur√© ‚úì"
    else
        log_error "SESSION_SECRET manquant"
    fi
    
    # V√©rifier JWT_SECRET
    if grep -q "JWT_SECRET=" .env; then
        log_success "JWT_SECRET configur√© ‚úì"
    else
        log_error "JWT_SECRET manquant"
    fi
else
    log_error "Fichier .env manquant"
fi

# 4. Test de connexion Prisma
echo ""
echo "4Ô∏è‚É£ Test de connexion Prisma..."

# Charger les variables d'environnement
if [ -f ".env" ]; then
    export $(cat .env | grep -v '^#' | xargs)
    
    # Test de connexion Prisma
    if npx prisma db execute --stdin <<< "SELECT 1;" 2>/dev/null; then
        log_success "Connexion Prisma r√©ussie"
    else
        log_error "Connexion Prisma √©chou√©e"
        log_info "V√©rification de la configuration DATABASE_URL..."
        echo "DATABASE_URL actuel: $DATABASE_URL"
    fi
fi

# 5. V√©rification des tables
echo ""
echo "5Ô∏è‚É£ V√©rification des tables..."

if PGPASSWORD=SMT2025 psql -U stockapp -d stock_management -c "\dt" 2>/dev/null; then
    log_success "Tables accessibles"
    
    # Compter les tables
    TABLE_COUNT=$(PGPASSWORD=SMT2025 psql -U stockapp -d stock_management -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | xargs || echo "0")
    log_info "Nombre de tables: $TABLE_COUNT"
    
    # V√©rifier les tables principales
    MAIN_TABLES=$(PGPASSWORD=SMT2025 psql -U stockapp -d stock_management -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name IN ('users', 'banks', 'cards', 'locations', 'movements', 'audit_logs');" 2>/dev/null | xargs || echo "0")
    log_info "Tables principales: $MAIN_TABLES/5"
    
    if [ "$MAIN_TABLES" -ge "5" ]; then
        log_success "Tables principales pr√©sentes"
    else
        log_warning "Tables principales manquantes"
    fi
else
    log_error "Impossible d'acc√©der aux tables"
fi

# 6. R√©sum√© et recommandations
echo ""
echo "=========================================="
echo "üìä R√©sum√© du Diagnostic"
echo "=========================================="

# V√©rifier PostgreSQL
if systemctl is-active --quiet postgresql; then
    echo "‚úÖ PostgreSQL: D√©marr√©"
else
    echo "‚ùå PostgreSQL: Arr√™t√©"
fi

# V√©rifier connexion stockapp
if PGPASSWORD=SMT2025 psql -U stockapp -d stock_management -c "SELECT 1;" 2>/dev/null; then
    echo "‚úÖ Connexion stockapp: OK"
else
    echo "‚ùå Connexion stockapp: √âchec"
fi

# V√©rifier .env
if [ -f ".env" ] && grep -q "NODE_ENV=production" .env && grep -q "DATABASE_URL=" .env; then
    echo "‚úÖ Variables d'environnement: OK"
else
    echo "‚ùå Variables d'environnement: Probl√®me"
fi

# V√©rifier Prisma
if npx prisma db execute --stdin <<< "SELECT 1;" 2>/dev/null; then
    echo "‚úÖ Prisma: OK"
else
    echo "‚ùå Prisma: √âchec"
fi

echo ""
echo "üîß Actions recommand√©es:"
echo "1. V√©rifier que PostgreSQL est d√©marr√©: systemctl status postgresql"
echo "2. V√©rifier que l'utilisateur stockapp existe: sudo -u postgres psql -c '\du'"
echo "3. V√©rifier que la base stock_management existe: sudo -u postgres psql -c '\l'"
echo "4. Tester la connexion: PGPASSWORD=SMT2025 psql -U stockapp -d stock_management"
echo "5. V√©rifier le .env: cat .env | grep DATABASE_URL"
echo ""
echo "‚úÖ Diagnostic termin√© !"
